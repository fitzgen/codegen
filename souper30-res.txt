fn matcher(pos: &mut FuncCursor, inst: Inst) {
match pos.func.dfg[inst] {
InstructionData::Binary { opcode, args } => {
match opcode {
Opcode::Ule => {
match pos.func.dfg.val_def(args[0]) {

ValDef::Param(_, _) => {
match pos.func.dfg.val_def(args[1]) {

ValDef::Param(_, _) => {

},
}
},
}
},Opcode::Ult => {
match pos.func.dfg.val_def(args[0]) {

ValDef::Param(_, _) => {
match pos.func.dfg.val_def(args[1]) {

ValDef::Param(_, _) => {

},
}
},
}
},Opcode::Sle => {
match pos.func.dfg.val_def(args[0]) {

ValDef::Param(_, _) => {
match pos.func.dfg.val_def(args[1]) {

ValDef::Param(_, _) => {

},
}
},
}
},Opcode::Slt => {
match pos.func.dfg.val_def(args[0]) {

ValDef::Param(_, _) => {
match pos.func.dfg.val_def(args[1]) {

ValDef::Param(_, _) => {

},
}
},
}
},Opcode::Eq => {
match pos.func.dfg.val_def(args[0]) {

ValDef::Param(_, _) => {
match pos.func.dfg.val_def(args[1]) {

ValDef::Param(_, _) => {

},
}
},
}
},Opcode::Ne => {
match pos.func.dfg.val_def(args[0]) {

ValDef::Param(_, _) => {
match pos.func.dfg.val_def(args[1]) {

ValDef::Param(_, _) => {

},
}
},
}
},
}
},
}
}
